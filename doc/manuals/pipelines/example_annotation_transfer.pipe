# This example pipeline demonstrates how to take annotations (in KPF
# format) from one camera and map them into another rendering the
# transfered annotations on the destination camera's video frames

# **NOTE** -- This annotation transfer pipeline is intended as an
# infrastructure demonstration, rather than a complete algorithmic
# solution for the annotation transfer task. It uses simple
# camera-to-camera geometric transfer, with no 3D model information or
# content-based refinement. In particular, note that transferred boxes
# may be above or below the ground plane implied by the camera models.

# ================================================================
process video
  :: video_input

  # File path to the input video (from the destination camera)
  video_filename = G436.avi
  video_reader:type = ffmpeg

# ================================================================
process cam2cam
  :: detected_object_filter

  filter:type = transform_detected_object_set

  # Our source and destination KRTD camera files
  filter:transform_detected_object_set:src_camera_krtd_file_name = G336.krtd
  filter:transform_detected_object_set:dest_camera_krtd_file_name = G436.krtd

# ================================================================
process kpf_in
  :: detected_object_input

  # KPF formatted annotation file path
  file_name = G336.geom.yml
  reader:type = kpf_input

# ================================================================
process shift
  :: shift_detected_object_set

  # Frame offset between the source and destination cameras; a value
  # of -228 here means that frame 229 in the source video
  # corresponds to frame 1 in the destination camera
  offset = -228

# ================================================================
process draw
  :: draw_detected_object_set

  draw_algo:type = ocv
  draw_algo:ocv:default_line_thickness = 3

# ================================================================
process imagewriter
  :: image_writer

  # Writes out the annotated video frames from the destination
  # camera, starting from image00001.jpg.  Note that frames will
  # only be written out while there are annotations to consume
  file_name_template = G436_output_frames/image%05d.jpg
  image_writer:type = ocv

# ================================================================
# connections
connect from video.image
        to draw.image

connect from kpf_in.detected_object_set
        to shift.detected_object_set

connect from shift.detected_object_set
        to cam2cam.detected_object_set

connect from cam2cam.detected_object_set
        to draw.detected_object_set

connect from draw.image
        to imagewriter.image

# -- end of file --

#
# Streaming ACT
#
config input 
 exp_file = /home/local/KHQ/ameya.shringi/ipc/act_detector/virat-act-detector-scripts/rgb_eval_1b.yml
 darknet_root = /home/local/KHQ/ameya.shringi/ipc/darknet

process zmq :: zmq_transport_receive
  port = 5560
  num_publishers = 1

# --------------------------------------------------
process dser :: deserializer
  serialization_type = protobuf 

connect from zmq.serialized_message to dser.timg

# --------------------------------------------------
process opt_flow :: optical_flow
  output_image_width=300
  ouptut_image_height=300

connect from dser.timg/image to opt_flow.image
connect from dser.timg/timestamp to opt_flow.timestamp

# --------------------------------------------------
process act_process :: ACTProcess
  exp = $CONFIG{input:exp_file}
  
connect from opt_flow.image to act_process.flow_image
connect from dser.timg/image to act_process.rgb_image
connect from dser.timg/timestamp to act_process.timestamp
connect from dser.timg/file_name to act_process.file_name

# -------------------------------------------------------------------
process merge_tubes :: MergeTubes
  exp = $CONFIG{input:exp_file}
  
connect from act_process.object_track_set to merge_tubes.object_track_set
connect from dser.timg/timestamp to merge_tubes.timestamp
connect from dser.timg/file_name to merge_tubes.file_name

# -------------------------------------------------------------------
process json_writer :: ACTJsonWriter
  exp = $CONFIG{input:exp_file}
  is_aod = False 
  confidence_threshold = 0.01
  json_path = sysfile_vis_distributed.json
  
connect from merge_tubes.object_track_set to json_writer.object_track_set
connect from dser.timg/timestamp to json_writer.timestamp
connect from dser.timg/file_name to json_writer.file_name

# -------------------------------------------------------------------
process visualize :: ACTVisualize
   exp = $CONFIG{input:exp_file}
  
connect from merge_tubes.current_object_track_set to visualize.object_track_set
connect from dser.timg/image to visualize.image
connect from dser.timg/timestamp to visualize.timestamp

# ------------------------------------------------------------------
process activity_visualizer::image_viewer
  pause_time = 0.01
  title = activity

connect from visualize.image to activity_visualizer.image


# use python scheduler

# -------------------------------------------------
config _scheduler
  type = pythread_per_process

config _pipeline:_edge
  capacity = 1
